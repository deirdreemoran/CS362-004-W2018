----------------- Testing Card: village ----------------
TEST 1:   + 2 numActions 
numActions is 5, expected 3

*** Did not pass assert test in file 'randomtestcard1.c' line 77.***

TEST 2:  Played pile increases by 1 
playedCards = 1, expected 1

TEST 3: state of game should not change for other players  
handCount player 1 is 149, expected 149
discardCount player 1 is 303, expected 303
deckCount player 1 is 235, expected 235
Card 1 count = 12, expected = 12
Card 2 count = 12, expected = 12
Card 3 count = 12, expected = 12
Card 7 count = 10, expected = 10
Card 22 count = 10, expected = 10
Card 14 count = 10, expected = 10
Card 17 count = 10, expected = 10
Card 11 count = 10, expected = 10
Card 21 count = 10, expected = 10
Card 25 count = 10, expected = 10
Card 19 count = 10, expected = 10
Card 13 count = 10, expected = 10
Card 8 count = 10, expected = 10


 >>>>> SUCCESS: Testing complete village <<<<<

Function 'updateCoins'
Lines executed:81.82% of 11
No branches
No calls

Function 'gainCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'discardCard'
Lines executed:84.62% of 13
No branches
No calls

Function 'cardEffect'
Lines executed:4.72% of 212
No branches
No calls

Function 'great_hallEffect'
Lines executed:0.00% of 5
No branches
No calls

Function 'villageEffect'
Lines executed:100.00% of 5
No branches
No calls

Function 'council_roomEffect'
Lines executed:0.00% of 10
No branches
No calls

Function 'adventurerEffect'
Lines executed:0.00% of 16
No branches
No calls

Function 'smithyEffect'
Lines executed:0.00% of 6
No branches
No calls

Function 'getCost'
Lines executed:0.00% of 30
No branches
No calls

Function 'drawCard'
Lines executed:36.36% of 22
No branches
No calls

Function 'getWinners'
Lines executed:0.00% of 24
No branches
No calls

Function 'scoreFor'
Lines executed:0.00% of 24
No branches
No calls

Function 'isGameOver'
Lines executed:0.00% of 10
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 20
No branches
No calls

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
No calls

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
No calls

Function 'buyCard'
Lines executed:0.00% of 13
No branches
No calls

Function 'playCard'
Lines executed:0.00% of 14
No branches
No calls

Function 'shuffle'
Lines executed:93.75% of 16
No branches
No calls

Function 'initializeGame'
Lines executed:82.26% of 62
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
No branches
No calls

File 'dominion.c'
Lines executed:20.67% of 566
Branches executed:22.78% of 417
Taken at least once:13.67% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 60 returned 100% blocks executed 83%
       60:    9:int compare(const void* a, const void* b) {
       60:    9-block  0
       60:   10:  if (*(int*)a > *(int*)b)
       60:   10-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 60
    #####:   11:    return 1;
    $$$$$:   11-block  0
unconditional  0 never executed
       60:   12:  if (*(int*)a < *(int*)b)
       60:   12-block  0
branch  0 taken 16 (fallthrough)
branch  1 taken 44
       16:   13:    return -1;
       16:   13-block  0
unconditional  0 taken 16
       44:   14:  return 0;
       44:   14-block  0
unconditional  0 taken 44
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState* newGame() {
    $$$$$:   17-block  0
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
    $$$$$:   19-block  0
unconditional  0 never executed
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   22-block  0
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
    $$$$$:   35-block  0
unconditional  0 never executed
        -:   36:}
        -:   37:
function initializeGame called 1 returned 100% blocks executed 85%
        1:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        1:   38-block  0
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;
        -:   44:  //set up random number generator
        1:   45:  SelectStream(1);
        1:   45-block  0
call    0 returned 1
        1:   46:  PutSeed((long)randomSeed);
call    0 returned 1
        -:   47:
        -:   48:  //check number of players
        1:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   49-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
        -:   50:    {
    #####:   51:      return -1;
    $$$$$:   51-block  0
unconditional  0 never executed
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        1:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       11:   58:  for (i = 0; i < 10; i++)
        1:   58-block  0
unconditional  0 taken 1
       10:   58-block  1
unconditional  1 taken 10
       11:   58-block  2
branch  2 taken 10
branch  3 taken 1 (fallthrough)
        -:   59:    {
      110:   60:      for (j = 0; j < 10; j++)
       10:   60-block  0
unconditional  0 taken 10
      100:   60-block  1
unconditional  1 taken 100
      110:   60-block  2
branch  2 taken 100
branch  3 taken 10 (fallthrough)
        -:   61:        {
      100:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
      100:   62-block  0
branch  0 taken 90 (fallthrough)
branch  1 taken 10
       90:   62-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 90
        -:   63:	    {
    #####:   64:	      return -1;
    $$$$$:   64-block  0
unconditional  0 never executed
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        1:   74:  if (numPlayers == 2)
        1:   74-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 10;
    $$$$$:   76-block  0
unconditional  0 never executed
        -:   77:    }
        1:   78:  else if (numPlayers == 3)
        1:   78-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
    $$$$$:   80-block  0
unconditional  0 never executed
        -:   81:    }
        -:   82:  else
        -:   83:    {
        1:   84:      state->supplyCount[curse] = 30;
        1:   84-block  0
unconditional  0 taken 1
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        1:   88:  if (numPlayers == 2)
        1:   88-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 8;
    #####:   91:      state->supplyCount[duchy] = 8;
    #####:   92:      state->supplyCount[province] = 8;
    $$$$$:   92-block  0
unconditional  0 never executed
        -:   93:    }
        -:   94:  else
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 12;
        1:   97:      state->supplyCount[duchy] = 12;
        1:   98:      state->supplyCount[province] = 12;
        1:   98-block  0
unconditional  0 taken 1
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        1:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  103:  state->supplyCount[silver] = 40;
        1:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
       21:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        1:  107-block  0
unconditional  0 taken 1
       20:  107-block  1
unconditional  1 taken 20
       21:  107-block  2
branch  2 taken 20
branch  3 taken 1 (fallthrough)
        -:  108:    {
      165:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
       20:  109-block  0
unconditional  0 taken 20
      145:  109-block  1
unconditional  1 taken 145
      165:  109-block  2
branch  2 taken 155
branch  3 taken 10 (fallthrough)
        -:  110:	{
      155:  111:	  if (kingdomCards[j] == i)
      155:  111-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 145
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       10:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
       10:  114-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 0
       10:  114-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        -:  115:		{
    #####:  116:		  if (numPlayers == 2){
    $$$$$:  116-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  116-block  1
unconditional  2 never executed
    #####:  117:		    state->supplyCount[i] = 8;
    $$$$$:  117-block  0
unconditional  0 never executed
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  119-block  0
unconditional  0 never executed
        -:  120:		}
        -:  121:	      else
        -:  122:		{
       10:  123:		  state->supplyCount[i] = 10;
       10:  123-block  0
unconditional  0 taken 10
        -:  124:		}
       10:  125:	      break;
       10:  125-block  0
unconditional  0 taken 10
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      145:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
        5:  139:  for (i = 0; i < numPlayers; i++)
        1:  139-block  0
unconditional  0 taken 1
        4:  139-block  1
unconditional  1 taken 4
        5:  139-block  2
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        -:  140:    {
        4:  141:      state->deckCount[i] = 0;
       16:  142:      for (j = 0; j < 3; j++)
        4:  142-block  0
unconditional  0 taken 4
       12:  142-block  1
unconditional  1 taken 12
       16:  142-block  2
branch  2 taken 12
branch  3 taken 4 (fallthrough)
        -:  143:	{
       12:  144:	  state->deck[i][j] = estate;
       12:  145:	  state->deckCount[i]++;
        -:  146:	}
       32:  147:      for (j = 3; j < 10; j++)
        4:  147-block  0
unconditional  0 taken 4
       28:  147-block  1
unconditional  1 taken 28
       32:  147-block  2
branch  2 taken 28
branch  3 taken 4 (fallthrough)
        -:  148:	{
       28:  149:	  state->deck[i][j] = copper;
       28:  150:	  state->deckCount[i]++;
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
        5:  155:  for (i = 0; i < numPlayers; i++)
        1:  155-block  0
unconditional  0 taken 1
        4:  155-block  1
unconditional  1 taken 4
        5:  155-block  2
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        -:  156:    {
        4:  157:      if ( shuffle(i, state) < 0 )
        4:  157-block  0
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        -:  158:	{
    #####:  159:	  return -1;
    $$$$$:  159-block  0
unconditional  0 never executed
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
        5:  164:  for (i = 0; i < numPlayers; i++)
        1:  164-block  0
unconditional  0 taken 1
        4:  164-block  1
unconditional  1 taken 4
        5:  164-block  2
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        -:  165:    {
        -:  166:      //initialize hand size to zero
        4:  167:      state->handCount[i] = 0;
        4:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:
        -:  176:  //set embargo tokens to 0 for all supply piles
       28:  177:  for (i = 0; i <= treasure_map; i++)
        1:  177-block  0
unconditional  0 taken 1
       27:  177-block  1
unconditional  1 taken 27
       28:  177-block  2
branch  2 taken 27
branch  3 taken 1 (fallthrough)
        -:  178:    {
       27:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        1:  183:  state->outpostPlayed = 0;
        1:  184:  state->phase = 0;
        1:  185:  state->numActions = 1;
        1:  186:  state->numBuys = 1;
        1:  187:  state->playedCardCount = 0;
        1:  188:  state->whoseTurn = 0;
        1:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        6:  193:  for (it = 0; it < 5; it++){
        1:  193-block  0
unconditional  0 taken 1
unconditional  1 taken 5
        6:  193-block  1
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        5:  194:    drawCard(state->whoseTurn, state);
        5:  194-block  0
call    0 returned 5
        -:  195:  }
        -:  196:
        1:  197:  updateCoins(state->whoseTurn, state, 0);
        1:  197-block  0
call    0 returned 1
        -:  198:
        1:  199:  return 0;
unconditional  0 taken 1
        -:  200:}
        -:  201:
function shuffle called 4 returned 100% blocks executed 94%
        4:  202:int shuffle(int player, struct gameState *state) {
        4:  202-block  0
        -:  203:
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
        4:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
        4:  210:  if (state->deckCount[player] < 1)
        4:  210-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  211:    return -1;
    $$$$$:  211-block  0
unconditional  0 never executed
        4:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        4:  212-block  0
call    0 returned 4
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
       44:  215:  while (state->deckCount[player] > 0) {
unconditional  0 taken 4
       44:  215-block  0
branch  1 taken 40
branch  2 taken 4 (fallthrough)
       40:  216:    card = floor(Random() * state->deckCount[player]);
       40:  216-block  0
call    0 returned 40
       40:  217:    newDeck[newDeckPos] = state->deck[player][card];
       40:  218:    newDeckPos++;
      121:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 40
       81:  219-block  0
unconditional  1 taken 81
      121:  219-block  1
branch  2 taken 81
branch  3 taken 40 (fallthrough)
       81:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
       40:  222:    state->deckCount[player]--;
       40:  222-block  0
unconditional  0 taken 40
        -:  223:  }
       44:  224:  for (i = 0; i < newDeckPos; i++) {
        4:  224-block  0
unconditional  0 taken 4
       40:  224-block  1
unconditional  1 taken 40
       44:  224-block  2
branch  2 taken 40
branch  3 taken 4 (fallthrough)
       40:  225:    state->deck[player][i] = newDeck[i];
       40:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
        4:  229:  return 0;
        4:  229-block  0
unconditional  0 taken 4
        4:  229-block  1
unconditional  1 taken 4
        -:  230:}
        -:  231:
function playCard called 0 returned 0% blocks executed 0%
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
    $$$$$:  232-block  0
        -:  233:{
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
    $$$$$:  238-block  0
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      return -1;
    $$$$$:  240-block  0
unconditional  0 never executed
        -:  241:    }
        -:  242:
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
    $$$$$:  244-block  0
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
    $$$$$:  246-block  0
unconditional  0 never executed
        -:  247:    }
        -:  248:
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
    $$$$$:  250-block  0
call    0 never executed
        -:  251:
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  253-block  0
branch  2 never executed
branch  3 never executed
        -:  254:    {
    #####:  255:      return -1;
    $$$$$:  255-block  0
unconditional  0 never executed
        -:  256:    }
        -:  257:
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  259-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  260:    {
    #####:  261:      return -1;
    $$$$$:  261-block  0
unconditional  0 never executed
        -:  262:    }
        -:  263:
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  268-block  0
call    0 never executed
        -:  269:
    #####:  270:  return 0;
unconditional  0 never executed
    $$$$$:  270-block  0
unconditional  1 never executed
        -:  271:}
        -:  272:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  273-block  0
    $$$$$:  273-block  1
unconditional  0 never executed
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
    $$$$$:  283-block  0
branch  0 never executed
branch  1 never executed
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    $$$$$:  286-block  0
unconditional  0 never executed
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  287-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    $$$$$:  290-block  0
unconditional  0 never executed
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  291-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
    $$$$$:  294-block  0
unconditional  0 never executed
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  298-block  0
call    0 never executed
        -:  299:
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  301:    state->numBuys--;
unconditional  0 never executed
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:
    #####:  309:  return 0;
    $$$$$:  309-block  0
unconditional  0 never executed
        -:  310:}
        -:  311:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  312:int numHandCards(struct gameState *state) {
    $$$$$:  312-block  0
    #####:  313:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  313-block  0
call    0 never executed
unconditional  1 never executed
        -:  314:}
        -:  315:
function handCard called 0 returned 0% blocks executed 0%
    #####:  316:int handCard(int handPos, struct gameState *state) {
    $$$$$:  316-block  0
    #####:  317:  int currentPlayer = whoseTurn(state);
    $$$$$:  317-block  0
call    0 never executed
    #####:  318:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  319:}
        -:  320:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  321:int supplyCount(int card, struct gameState *state) {
    $$$$$:  321-block  0
    #####:  322:  return state->supplyCount[card];
    $$$$$:  322-block  0
unconditional  0 never executed
        -:  323:}
        -:  324:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  325-block  0
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  329-block  0
unconditional  0 never executed
    $$$$$:  329-block  1
unconditional  1 never executed
    $$$$$:  329-block  2
branch  2 never executed
branch  3 never executed
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
    $$$$$:  331-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  331-block  1
unconditional  2 never executed
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  334-block  0
unconditional  0 never executed
    $$$$$:  334-block  1
unconditional  1 never executed
    $$$$$:  334-block  2
branch  2 never executed
branch  3 never executed
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
    $$$$$:  336-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  336-block  1
unconditional  2 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  339-block  0
unconditional  0 never executed
    $$$$$:  339-block  1
unconditional  1 never executed
    $$$$$:  339-block  2
branch  2 never executed
branch  3 never executed
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
    $$$$$:  341-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  341-block  1
unconditional  2 never executed
        -:  342:    }
        -:  343:
    #####:  344:  return count;
    $$$$$:  344-block  0
unconditional  0 never executed
        -:  345:}
        -:  346:
function whoseTurn called 1 returned 100% blocks executed 100%
        1:  347:int whoseTurn(struct gameState *state) {
        1:  347-block  0
        1:  348:  return state->whoseTurn;
        1:  348-block  0
unconditional  0 taken 1
        -:  349:}
        -:  350:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  351:int endTurn(struct gameState *state) {
    $$$$$:  351-block  0
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
    $$$$$:  354-block  0
call    0 never executed
        -:  355:
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  357-block  0
unconditional  1 never executed
    $$$$$:  357-block  1
branch  2 never executed
branch  3 never executed
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){
    $$$$$:  364-block  0
branch  0 never executed
branch  1 never executed
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  365-block  0
unconditional  0 never executed
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  368-block  0
unconditional  0 never executed
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    $$$$$:  381-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  381-block  1
branch  2 never executed
branch  3 never executed
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  382-block  0
call    0 never executed
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  386-block  0
call    0 never executed
        -:  387:
    #####:  388:  return 0;
unconditional  0 never executed
        -:  389:}
        -:  390:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  391:int isGameOver(struct gameState *state) {
    $$$$$:  391-block  0
        -:  392:  int i;
        -:  393:  int j;
        -:  394:
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
    $$$$$:  396-block  0
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
    $$$$$:  398-block  0
unconditional  0 never executed
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
    $$$$$:  403-block  0
unconditional  0 never executed
    $$$$$:  403-block  1
unconditional  1 never executed
    $$$$$:  403-block  2
branch  2 never executed
branch  3 never executed
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
    $$$$$:  405-block  0
branch  0 never executed
branch  1 never executed
        -:  406:	{
    #####:  407:	  j++;
    $$$$$:  407-block  0
unconditional  0 never executed
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
    $$$$$:  410-block  0
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      return 1;
    $$$$$:  412-block  0
unconditional  0 never executed
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
    $$$$$:  415-block  0
unconditional  0 never executed
        -:  416:}
        -:  417:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  418:int scoreFor (int player, struct gameState *state) {
    $$$$$:  418-block  0
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  423-block  0
unconditional  0 never executed
    $$$$$:  423-block  1
unconditional  1 never executed
    $$$$$:  423-block  2
branch  2 never executed
branch  3 never executed
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
unconditional  2 never executed
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  430-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  430-block  1
call    2 never executed
unconditional  3 never executed
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  434-block  0
unconditional  0 never executed
    $$$$$:  434-block  1
unconditional  1 never executed
    $$$$$:  434-block  2
branch  2 never executed
branch  3 never executed
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
unconditional  2 never executed
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  441-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  441-block  1
call    2 never executed
unconditional  3 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  445-block  0
unconditional  0 never executed
    $$$$$:  445-block  1
unconditional  1 never executed
    $$$$$:  445-block  2
branch  2 never executed
branch  3 never executed
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
unconditional  2 never executed
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  452-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  452-block  1
call    2 never executed
unconditional  3 never executed
        -:  453:    }
        -:  454:
    #####:  455:  return score;
    $$$$$:  455-block  0
unconditional  0 never executed
        -:  456:}
        -:  457:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  458-block  0
        -:  459:  int i;
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  465-block  0
unconditional  0 never executed
    $$$$$:  465-block  1
unconditional  1 never executed
    $$$$$:  465-block  2
branch  2 never executed
branch  3 never executed
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
    $$$$$:  468-block  0
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  players[i] = -9999;
    $$$$$:  470-block  0
unconditional  0 never executed
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
    $$$$$:  474-block  0
call    0 never executed
unconditional  1 never executed
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  480-block  0
unconditional  0 never executed
    $$$$$:  480-block  1
unconditional  1 never executed
    $$$$$:  480-block  2
branch  2 never executed
branch  3 never executed
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
    $$$$$:  482-block  0
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:	  j = i;
    $$$$$:  484-block  0
unconditional  0 never executed
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    $$$$$:  490-block  0
call    0 never executed
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  491-block  0
unconditional  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  493-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  493-block  1
branch  2 never executed
branch  3 never executed
        -:  494:	{
    #####:  495:	  players[i]++;
    $$$$$:  495-block  0
unconditional  0 never executed
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  501-block  0
unconditional  0 never executed
    $$$$$:  501-block  1
unconditional  1 never executed
    $$$$$:  501-block  2
branch  2 never executed
branch  3 never executed
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
    $$$$$:  503-block  0
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:	  j = i;
    $$$$$:  505-block  0
unconditional  0 never executed
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  511-block  0
unconditional  0 never executed
    $$$$$:  511-block  1
unconditional  1 never executed
    $$$$$:  511-block  2
branch  2 never executed
branch  3 never executed
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
    $$$$$:  513-block  0
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:	  players[i] = 1;
    $$$$$:  515-block  0
unconditional  0 never executed
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
    $$$$$:  519-block  0
unconditional  0 never executed
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
    $$$$$:  523-block  0
unconditional  0 never executed
        -:  524:}
        -:  525:
function drawCard called 6 returned 100% blocks executed 38%
        6:  526:int drawCard(int player, struct gameState *state)
        6:  526-block  0
        -:  527:{	int count;
        -:  528:  int deckCounter;
        6:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        6:  529-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 6
        -:  530:
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  534-block  0
unconditional  0 never executed
    $$$$$:  534-block  1
unconditional  1 never executed
    $$$$$:  534-block  2
branch  2 never executed
branch  3 never executed
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
    $$$$$:  543-block  0
call    0 never executed
        -:  544:
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
unconditional  0 never executed
        -:  553:
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
    $$$$$:  560-block  0
branch  0 never executed
branch  1 never executed
    #####:  561:      return -1;
    $$$$$:  561-block  0
unconditional  0 never executed
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
    $$$$$:  565-block  0
unconditional  0 never executed
        -:  566:  }
        -:  567:
        -:  568:  else{
        6:  569:    int count = state->handCount[player];//Get current hand count for player
        6:  569-block  0
unconditional  0 taken 6
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
        6:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
        6:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        6:  577:    state->deckCount[player]--;
        6:  578:    state->handCount[player]++;//Increment hand count
        6:  578-block  0
unconditional  0 taken 6
        -:  579:  }
        -:  580:
        6:  581:  return 0;
        6:  581-block  0
unconditional  0 taken 6
        -:  582:}
        -:  583:
function getCost called 0 returned 0% blocks executed 0%
    #####:  584:int getCost(int cardNumber)
    $$$$$:  584-block  0
        -:  585:{
    #####:  586:  switch( cardNumber )
    $$$$$:  586-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
    $$$$$:  589-block  0
unconditional  0 never executed
        -:  590:    case estate:
    #####:  591:      return 2;
    $$$$$:  591-block  0
unconditional  0 never executed
        -:  592:    case duchy:
    #####:  593:      return 5;
    $$$$$:  593-block  0
unconditional  0 never executed
        -:  594:    case province:
    #####:  595:      return 8;
    $$$$$:  595-block  0
unconditional  0 never executed
        -:  596:    case copper:
    #####:  597:      return 0;
    $$$$$:  597-block  0
unconditional  0 never executed
        -:  598:    case silver:
    #####:  599:      return 3;
    $$$$$:  599-block  0
unconditional  0 never executed
        -:  600:    case gold:
    #####:  601:      return 6;
    $$$$$:  601-block  0
unconditional  0 never executed
        -:  602:    case adventurer:
    #####:  603:      return 6;
    $$$$$:  603-block  0
unconditional  0 never executed
        -:  604:    case council_room:
    #####:  605:      return 5;
    $$$$$:  605-block  0
unconditional  0 never executed
        -:  606:    case feast:
    #####:  607:      return 4;
    $$$$$:  607-block  0
unconditional  0 never executed
        -:  608:    case gardens:
    #####:  609:      return 4;
    $$$$$:  609-block  0
unconditional  0 never executed
        -:  610:    case mine:
    #####:  611:      return 5;
    $$$$$:  611-block  0
unconditional  0 never executed
        -:  612:    case remodel:
    #####:  613:      return 4;
    $$$$$:  613-block  0
unconditional  0 never executed
        -:  614:    case smithy:
    #####:  615:      return 4;
    $$$$$:  615-block  0
unconditional  0 never executed
        -:  616:    case village:
    #####:  617:      return 3;
    $$$$$:  617-block  0
unconditional  0 never executed
        -:  618:    case baron:
    #####:  619:      return 4;
    $$$$$:  619-block  0
unconditional  0 never executed
        -:  620:    case great_hall:
    #####:  621:      return 3;
    $$$$$:  621-block  0
unconditional  0 never executed
        -:  622:    case minion:
    #####:  623:      return 5;
    $$$$$:  623-block  0
unconditional  0 never executed
        -:  624:    case steward:
    #####:  625:      return 3;
    $$$$$:  625-block  0
unconditional  0 never executed
        -:  626:    case tribute:
    #####:  627:      return 5;
    $$$$$:  627-block  0
unconditional  0 never executed
        -:  628:    case ambassador:
    #####:  629:      return 3;
    $$$$$:  629-block  0
unconditional  0 never executed
        -:  630:    case cutpurse:
    #####:  631:      return 4;
    $$$$$:  631-block  0
unconditional  0 never executed
        -:  632:    case embargo:
    #####:  633:      return 2;
    $$$$$:  633-block  0
unconditional  0 never executed
        -:  634:    case outpost:
    #####:  635:      return 5;
    $$$$$:  635-block  0
unconditional  0 never executed
        -:  636:    case salvager:
    #####:  637:      return 4;
    $$$$$:  637-block  0
unconditional  0 never executed
        -:  638:    case sea_hag:
    #####:  639:      return 4;
    $$$$$:  639-block  0
unconditional  0 never executed
        -:  640:    case treasure_map:
    #####:  641:      return 4;
    $$$$$:  641-block  0
unconditional  0 never executed
        -:  642:    }
        -:  643:
    #####:  644:  return -1;
    $$$$$:  644-block  0
unconditional  0 never executed
        -:  645:}
        -:  646:
function smithyEffect called 0 returned 0% blocks executed 0%
    #####:  647:int smithyEffect(int currentPlayer, struct gameState *state, int handPos){
    $$$$$:  647-block  0
    #####:  648:		    int i = 0;
        -:  649:		      //+3 Cards
    #####:  650:		    for (i = 0; i > 3; i++)  // Bug introduced < changed to >
    $$$$$:  650-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  650-block  1
branch  2 never executed
branch  3 never executed
        -:  651:			{
    #####:  652:			  drawCard(currentPlayer, state);
    $$$$$:  652-block  0
call    0 never executed
        -:  653:			}
        -:  654:
        -:  655:		    //discard card from hand
    #####:  656:		    discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  656-block  0
call    0 never executed
    #####:  657:      return 0;
unconditional  0 never executed
        -:  658:}
        -:  659:
        -:  660:
function adventurerEffect called 0 returned 0% blocks executed 0%
    #####:  661:int adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int * temphand){
    $$$$$:  661-block  0
    #####:  662:	  int z = 0;  // counter for temp hand
        -:  663:	    int cardDrawn;
    #####:  664:	while(drawntreasure>2)// bug introduced changed <  to >
    $$$$$:  664-block  0
unconditional  0 never executed
    $$$$$:  664-block  1
branch  1 never executed
branch  2 never executed
        -:  665:	{
        -:  666:		//if the deck is empty we need to shuffle discard and add to deck
    #####:  667:		if (state->deckCount[currentPlayer] <1)
    $$$$$:  667-block  0
branch  0 never executed
branch  1 never executed
        -:  668:		{
    #####:  669:		  shuffle(currentPlayer, state);
    $$$$$:  669-block  0
call    0 never executed
unconditional  1 never executed
        -:  670:		}
        -:  671:
    #####:  672:		drawCard(currentPlayer, state);
    $$$$$:  672-block  0
call    0 never executed
    #####:  673:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  674:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  674-block  0
branch  2 never executed
branch  3 never executed
    $$$$$:  674-block  1
branch  4 never executed
branch  5 never executed
    #####:  675:		  drawntreasure++;
    $$$$$:  675-block  0
unconditional  0 never executed
        -:  676:		else
        -:  677:		{
    #####:  678:		  temphand[z]=cardDrawn;
        -:  679:		  //this should just remove the top card (the most recently drawn one).
        -:  680:
    #####:  681:		  state->handCount[currentPlayer]--;
    #####:  682:		  z++;
    $$$$$:  682-block  0
unconditional  0 never executed
        -:  683:		}
        -:  684:	}
    #####:  685:	while(z-1>=0)
    $$$$$:  685-block  0
unconditional  0 never executed
    $$$$$:  685-block  1
branch  1 never executed
branch  2 never executed
        -:  686:	{
    #####:  687:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; // discard all cards in play that have been drawn
    #####:  688:		z=z-1;
    $$$$$:  688-block  0
unconditional  0 never executed
        -:  689:	}
    #####:  690:	return 0;
    $$$$$:  690-block  0
unconditional  0 never executed
        -:  691:}
        -:  692:
function council_roomEffect called 0 returned 0% blocks executed 0%
    #####:  693:int council_roomEffect(int currentPlayer, struct gameState * state, int handPos)
    $$$$$:  693-block  0
        -:  694:{
    #####:  695:	int i = 0;
        -:  696:	//+4 Cards
    #####:  697:	      for (i = 0; i < 4; i++)
    $$$$$:  697-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  697-block  1
branch  2 never executed
branch  3 never executed
        -:  698:		{
    #####:  699:		  drawCard(currentPlayer, state);
    $$$$$:  699-block  0
call    0 never executed
        -:  700:		}
        -:  701:
        -:  702:	      //+1 Buy
    #####:  703:	      state->numBuys++;
        -:  704:
        -:  705:	      //Each other player draws a card
    #####:  706:	      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  706-block  0
unconditional  0 never executed
    $$$$$:  706-block  1
unconditional  1 never executed
    $$$$$:  706-block  2
branch  2 never executed
branch  3 never executed
        -:  707:		{
    #####:  708:		  if ( i == currentPlayer )  // Introduce bug, changed i != to read i ==
    $$$$$:  708-block  0
branch  0 never executed
branch  1 never executed
        -:  709:		    {
    #####:  710:		      drawCard(i, state);
    $$$$$:  710-block  0
call    0 never executed
unconditional  1 never executed
        -:  711:		    }
        -:  712:		}
        -:  713:
        -:  714:	      //put played card in played card pile
    #####:  715:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  715-block  0
call    0 never executed
    #####:  716:	      return 0;
unconditional  0 never executed
        -:  717:}
        -:  718:
function villageEffect called 1 returned 100% blocks executed 100%
        1:  719:int villageEffect(int currentPlayer, struct gameState * state, int handPos){
        1:  719-block  0
        -:  720:	 //+1 Card
        1:  721:	      drawCard(currentPlayer, state);
        1:  721-block  0
call    0 returned 1
        -:  722:
        -:  723:	      //+2 Actions
        1:  724:	      state->numActions = state->numActions + 4;  //Bug introduced, changed 2 to 4
        -:  725:
        -:  726:	      //discard played card from hand
        1:  727:	      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  728:      return 0;
unconditional  0 taken 1
        -:  729:  }
        -:  730:
function great_hallEffect called 0 returned 0% blocks executed 0%
    #####:  731:  int great_hallEffect(int currentPlayer, struct gameState * state, int handPos){
    $$$$$:  731-block  0
        -:  732:	  //+1 Card
    #####:  733:	        drawCard(currentPlayer, state);
    $$$$$:  733-block  0
call    0 never executed
        -:  734:
        -:  735:	        //+1 Actions
    #####:  736:	        state->numActions++;
        -:  737:
        -:  738:	        //discard card from hand
    #####:  739:	        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  740:      return 0;
unconditional  0 never executed
        -:  741:  }
        -:  742:
        -:  743:
function cardEffect called 1 returned 100% blocks executed 3%
        1:  744:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        1:  744-block  0
        -:  745:{
        -:  746:  int i;
        -:  747:  int j;
        -:  748:  int k;
        -:  749:  int x;
        -:  750:  int index;
        1:  751:  int currentPlayer = whoseTurn(state);
        1:  751-block  0
call    0 returned 1
        1:  752:  int nextPlayer = currentPlayer + 1;
        -:  753:
        1:  754:  int tributeRevealedCards[2] = {-1, -1};
        -:  755:  int temphand[MAX_HAND];// moved above the if statement
        1:  756:  int drawntreasure=0;
        -:  757:  int cardDrawn;
        1:  758:  int z = 0;// this is the counter for the temp hand
        1:  759:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  760:    nextPlayer = 0;
    $$$$$:  760-block  0
unconditional  0 never executed
        -:  761:  }
        -:  762:
        -:  763:
        -:  764:  //uses switch to select card and perform actions
        1:  765:  switch( card )
        1:  765-block  0
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  766:    {
        -:  767:    case adventurer:
    #####:  768:    	adventurerEffect(drawntreasure, state, currentPlayer, temphand);
    $$$$$:  768-block  0
call    0 never executed
    #####:  769:    	return 0;
unconditional  0 never executed
        -:  770:
        -:  771:    case council_room:
    #####:  772:      council_roomEffect(currentPlayer, state, handPos);
    $$$$$:  772-block  0
call    0 never executed
    #####:  773:      return 0;
unconditional  0 never executed
        -:  774:
        -:  775:    case feast:
        -:  776:      //gain card with cost up to 5
        -:  777:      //Backup hand
    #####:  778:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  778-block  0
unconditional  0 never executed
    $$$$$:  778-block  1
unconditional  1 never executed
    $$$$$:  778-block  2
branch  2 never executed
branch  3 never executed
    #####:  779:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  780:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  781:      }
        -:  782:      //Backup hand
        -:  783:
        -:  784:      //Update Coins for Buy
    #####:  785:      updateCoins(currentPlayer, state, 5);
    $$$$$:  785-block  0
call    0 never executed
    #####:  786:      x = 1;//Condition to loop on
    #####:  787:      while( x == 1) {//Buy one card
unconditional  0 never executed
    $$$$$:  787-block  0
branch  1 never executed
branch  2 never executed
    #####:  788:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  788-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:	  if (DEBUG)
        -:  790:	    printf("None of that card left, sorry!\n");
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  794:	  }
        -:  795:	}
    #####:  796:	else if (state->coins < getCost(choice1)){
    $$$$$:  796-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  printf("That card is too expensive!\n");
    $$$$$:  797-block  0
call    0 never executed
unconditional  1 never executed
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  801:	  }
        -:  802:	}
        -:  803:	else{
        -:  804:
        -:  805:	  if (DEBUG){
        -:  806:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  807:	  }
        -:  808:
    #####:  809:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  809-block  0
call    0 never executed
    #####:  810:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  811:
        -:  812:	  if (DEBUG){
        -:  813:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  814:	  }
        -:  815:
        -:  816:	}
        -:  817:      }
        -:  818:
        -:  819:      //Reset Hand
    #####:  820:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  820-block  0
unconditional  0 never executed
    $$$$$:  820-block  1
unconditional  1 never executed
    $$$$$:  820-block  2
branch  2 never executed
branch  3 never executed
    #####:  821:	state->hand[currentPlayer][i] = temphand[i];
    #####:  822:	temphand[i] = -1;
        -:  823:      }
        -:  824:      //Reset Hand
        -:  825:
    #####:  826:      return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:
        -:  828:    case gardens:
    #####:  829:      return -1;
    $$$$$:  829-block  0
unconditional  0 never executed
        -:  830:
        -:  831:    case mine:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  834-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  834-block  1
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
    $$$$$:  836-block  0
unconditional  0 never executed
        -:  837:	}
        -:  838:
    #####:  839:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  839-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  839-block  1
branch  2 never executed
branch  3 never executed
        -:  840:	{
    #####:  841:	  return -1;
    $$$$$:  841-block  0
unconditional  0 never executed
        -:  842:	}
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  844-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  845:	{
    #####:  846:	  return -1;
    $$$$$:  846-block  0
unconditional  0 never executed
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  849-block  0
call    0 never executed
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  855-block  0
unconditional  1 never executed
    $$$$$:  855-block  1
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  857-block  0
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	      break;
unconditional  0 never executed
        -:  861:	    }
        -:  862:	}
        -:  863:
    #####:  864:      return 0;
    $$$$$:  864-block  0
unconditional  0 never executed
        -:  865:
        -:  866:    case remodel:
    #####:  867:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  868:
    #####:  869:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  869-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  870:	{
    #####:  871:	  return -1;
    $$$$$:  871-block  0
unconditional  0 never executed
        -:  872:	}
        -:  873:
    #####:  874:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  874-block  0
call    0 never executed
        -:  875:
        -:  876:      //discard card from hand
    #####:  877:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  878:
        -:  879:      //discard trashed card
    #####:  880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  880-block  0
unconditional  1 never executed
    $$$$$:  880-block  1
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  882-block  0
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      discardCard(i, currentPlayer, state, 0);
    $$$$$:  884-block  0
call    0 never executed
    #####:  885:	      break;
unconditional  0 never executed
        -:  886:	    }
        -:  887:	}
        -:  888:
        -:  889:
    #####:  890:      return 0;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:
        -:  892:    case smithy:
    #####:  893:    	smithyEffect(currentPlayer, state, handPos);
    $$$$$:  893-block  0
call    0 never executed
    #####:  894:        return 0;
unconditional  0 never executed
        -:  895:
        -:  896:    case village:
        1:  897:    	villageEffect(currentPlayer, state, handPos);
        1:  897-block  0
call    0 returned 1
        1:  898:		return 0;
unconditional  0 taken 1
        -:  899:
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  902-block  0
branch  0 never executed
branch  1 never executed
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    $$$$$:  905-block  0
unconditional  0 never executed
    $$$$$:  905-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  905-block  2
unconditional  3 never executed
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  906-block  0
branch  0 never executed
branch  1 never executed
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  910-block  0
unconditional  0 never executed
    $$$$$:  910-block  1
unconditional  1 never executed
    $$$$$:  910-block  2
branch  2 never executed
branch  3 never executed
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  917-block  0
branch  0 never executed
branch  1 never executed
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    $$$$$:  922-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  923-block  0
call    0 never executed
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  926:		isGameOver(state);
    $$$$$:  926-block  0
call    0 never executed
unconditional  1 never executed
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  929-block  0
unconditional  0 never executed
        -:  930:	  }
        -:  931:
        -:  932:	  else{
    #####:  933:	    p++;//Next card
    $$$$$:  933-block  0
unconditional  0 never executed
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    $$$$$:  939-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  940-block  0
call    0 never executed
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  943:	    isGameOver(state);
    $$$$$:  943-block  0
call    0 never executed
unconditional  1 never executed
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:
        -:  948:
    #####:  949:      return 0;
    $$$$$:  949-block  0
unconditional  0 never executed
        -:  950:
        -:  951:    case great_hall:
    #####:  952:      great_hallEffect(currentPlayer, state, handPos);
    $$$$$:  952-block  0
call    0 never executed
    #####:  953:      return 0;
unconditional  0 never executed
        -:  954:
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
unconditional  0 never executed
        -:  965:	}
        -:  966:
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
unconditional  0 never executed
    $$$$$:  970-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
unconditional  1 never executed
        -:  973:	    }
        -:  974:
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  976-block  1
branch  2 never executed
branch  3 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
unconditional  0 never executed
    $$$$$:  982-block  1
unconditional  1 never executed
    $$$$$:  982-block  2
branch  2 never executed
branch  3 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
branch  1 never executed
branch  2 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
unconditional  1 never executed
        -:  992:			}
        -:  993:
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  995-block  1
branch  2 never executed
branch  3 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
unconditional  0 never executed
        -: 1005:
        -: 1006:    case steward:
    #####: 1007:      if (choice1 == 1)
    $$$$$: 1007-block  0
branch  0 never executed
branch  1 never executed
        -: 1008:	{
        -: 1009:	  //+2 cards
    #####: 1010:	  drawCard(currentPlayer, state);
    $$$$$: 1010-block  0
call    0 never executed
    #####: 1011:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1012:	}
    #####: 1013:      else if (choice1 == 2)
    $$$$$: 1013-block  0
branch  0 never executed
branch  1 never executed
        -: 1014:	{
        -: 1015:	  //+2 coins
    #####: 1016:	  state->coins = state->coins + 2;
    $$$$$: 1016-block  0
unconditional  0 never executed
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
    #####: 1021:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1021-block  0
call    0 never executed
    #####: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1023:	}
        -: 1024:
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1026-block  0
call    0 never executed
    #####: 1027:      return 0;
unconditional  0 never executed
        -: 1028:
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
unconditional  0 never executed
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
unconditional  0 never executed
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
unconditional  0 never executed
    $$$$$: 1049-block  1
unconditional  1 never executed
    $$$$$: 1049-block  2
branch  2 never executed
branch  3 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
unconditional  1 never executed
        -: 1057:	}
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
unconditional  0 never executed
        -: 1064:      }
        -: 1065:
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
unconditional  0 never executed
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
unconditional  0 never executed
    $$$$$: 1072-block  1
unconditional  1 never executed
    $$$$$: 1072-block  2
branch  2 never executed
branch  3 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
unconditional  0 never executed
        -: 1075:	}
        -: 1076:
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
unconditional  0 never executed
        -: 1083:	}
        -: 1084:      }
        -: 1085:
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
unconditional  0 never executed
        -: 1087:
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;
    $$$$$: 1093-block  0
unconditional  0 never executed
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
unconditional  0 never executed
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
unconditional  0 never executed
    $$$$$: 1101-block  1
unconditional  1 never executed
    $$$$$: 1101-block  2
branch  2 never executed
branch  3 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
unconditional  0 never executed
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;
    $$$$$: 1110-block  0
unconditional  0 never executed
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG)
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
unconditional  0 never executed
    $$$$$: 1120-block  1
unconditional  1 never executed
    $$$$$: 1120-block  2
branch  2 never executed
branch  3 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
unconditional  1 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$: 1132-block  0
unconditional  1 never executed
    $$$$$: 1132-block  1
branch  2 never executed
branch  3 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
unconditional  0 never executed
    $$$$$: 1134-block  1
unconditional  1 never executed
    $$$$$: 1134-block  2
branch  2 never executed
branch  3 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
unconditional  0 never executed
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
unconditional  0 never executed
        -: 1145:
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1149-block  0
unconditional  1 never executed
    $$$$$: 1149-block  1
branch  2 never executed
branch  3 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
unconditional  0 never executed
    $$$$$: 1153-block  1
unconditional  1 never executed
    $$$$$: 1153-block  2
branch  2 never executed
branch  3 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
unconditional  0 never executed
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
unconditional  0 never executed
    $$$$$: 1162-block  1
unconditional  1 never executed
    $$$$$: 1162-block  2
branch  2 never executed
branch  3 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}
    #####: 1167:		      break;
    $$$$$: 1167-block  0
unconditional  0 never executed
        -: 1168:		    }
        -: 1169:		}
        -: 1170:
        -: 1171:	    }
        -: 1172:
        -: 1173:	}
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
unconditional  0 never executed
        -: 1179:
        -: 1180:
        -: 1181:    case embargo:
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
unconditional  0 never executed
        -: 1189:	}
        -: 1190:
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
unconditional  0 never executed
        -: 1197:
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
unconditional  0 never executed
        -: 1205:
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1216:	}
        -: 1217:
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
unconditional  0 never executed
        -: 1221:
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
unconditional  0 never executed
    $$$$$: 1223-block  1
unconditional  1 never executed
    $$$$$: 1223-block  2
branch  2 never executed
branch  3 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
unconditional  0 never executed
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
unconditional  0 never executed
        -: 1231:
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
unconditional  0 never executed
    $$$$$: 1235-block  1
unconditional  1 never executed
    $$$$$: 1235-block  2
branch  2 never executed
branch  3 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
unconditional  0 never executed
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1250-block  0
branch  2 never executed
branch  3 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
unconditional  0 never executed
        -: 1257:	}
        -: 1258:
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
unconditional  0 never executed
        -: 1261:    }
        -: 1262:
        1: 1263:  return -1;
    $$$$$: 1263-block  0
unconditional  0 never executed
        1: 1263-block  1
unconditional  1 taken 1
        -: 1264:}
        -: 1265:
function discardCard called 1 returned 100% blocks executed 78%
        1: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        1: 1266-block  0
        -: 1267:{
        -: 1268:
        -: 1269:  //if card is not trashed, added to Played pile
        1: 1270:  if (trashFlag < 1)
        1: 1270-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -: 1271:    {
        -: 1272:      //add card to played pile
        1: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1274:      state->playedCardCount++;
        1: 1274-block  0
unconditional  0 taken 1
        -: 1275:    }
        -: 1276:
        -: 1277:  //set played card to -1
        1: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:
        -: 1280:  //remove card from player's hand
        1: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        1: 1281-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
    $$$$$: 1284-block  0
unconditional  0 never executed
        -: 1285:    }
        1: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        1: 1286-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
unconditional  0 never executed
        -: 1290:    }
        -: 1291:  else
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
        1: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
        1: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
        1: 1298:      state->handCount[currentPlayer]--;
        1: 1298-block  0
unconditional  0 taken 1
        -: 1299:    }
        -: 1300:
        1: 1301:  return 0;
        1: 1301-block  0
unconditional  0 taken 1
        -: 1302:}
        -: 1303:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
    $$$$$: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1309:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1309-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1310:    {
    #####: 1311:      return -1;
    $$$$$: 1311-block  0
unconditional  0 never executed
        -: 1312:    }
        -: 1313:
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
    #####: 1319:  if (toFlag == 1)
    $$$$$: 1319-block  0
branch  0 never executed
branch  1 never executed
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
    $$$$$: 1322-block  0
unconditional  0 never executed
        -: 1323:    }
    #####: 1324:  else if (toFlag == 2)
    $$$$$: 1324-block  0
branch  0 never executed
branch  1 never executed
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
    $$$$$: 1327-block  0
unconditional  0 never executed
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
    #####: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1332:      state->discardCount[player]++;
    $$$$$: 1332-block  0
unconditional  0 never executed
        -: 1333:    }
        -: 1334:
        -: 1335:  //decrease number in supply pile
    #####: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:
    #####: 1338:  return 0;
    $$$$$: 1338-block  0
unconditional  0 never executed
        -: 1339:}
        -: 1340:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        1: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:
        -: 1345:  //reset coin count
        1: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
        6: 1349:  for (i = 0; i < state->handCount[player]; i++)
        1: 1349-block  0
unconditional  0 taken 1
        5: 1349-block  1
unconditional  1 taken 5
        6: 1349-block  2
branch  2 taken 5
branch  3 taken 1 (fallthrough)
        -: 1350:    {
        5: 1351:      if (state->hand[player][i] == copper)
        5: 1351-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -: 1352:	{
        4: 1353:	  state->coins += 1;
        4: 1353-block  0
unconditional  0 taken 4
        -: 1354:	}
        1: 1355:      else if (state->hand[player][i] == silver)
        1: 1355-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
    $$$$$: 1357-block  0
unconditional  0 never executed
        -: 1358:	}
        1: 1359:      else if (state->hand[player][i] == gold)
        1: 1359-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
    $$$$$: 1361-block  0
unconditional  0 never executed
        -: 1362:	}
        -: 1363:    }
        -: 1364:
        -: 1365:  //add bonus
        1: 1366:  state->coins += bonus;
        -: 1367:
        1: 1368:  return 0;
        1: 1368-block  0
unconditional  0 taken 1
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372://end of dominion.c
        -: 1373:
