        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 5250 returned 100% blocks executed 83%
     5250:    8:int compare(const void* a, const void* b) {
     5250:    8-block  0
     5250:    9:  if (*(int*)a > *(int*)b)
     5250:    9-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 5250
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
     5250:   11:  if (*(int*)a < *(int*)b)
     5250:   11-block  0
branch  0 taken 1400 (fallthrough)
branch  1 taken 3850
     1400:   12:    return -1;
     1400:   12-block  0
unconditional  0 taken 1400
     3850:   13:  return 0;
     3850:   13-block  0
unconditional  0 taken 3850
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 175 returned 100% blocks executed 88%
      175:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
      175:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      175:   44:  SelectStream(1);
      175:   44-block  0
call    0 returned 175
      175:   45:  PutSeed((long)randomSeed);
call    0 returned 175
        -:   46:  
        -:   47:  //check number of players
      175:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 175 (fallthrough)
branch  1 taken 0
      175:   48-block  0
branch  2 taken 0 (fallthrough)
branch  3 taken 175
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      175:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1925:   57:  for (i = 0; i < 10; i++)
      175:   57-block  0
unconditional  0 taken 175
     1750:   57-block  1
unconditional  1 taken 1750
     1925:   57-block  2
branch  2 taken 1750
branch  3 taken 175 (fallthrough)
        -:   58:    {
    19250:   59:      for (j = 0; j < 10; j++)
     1750:   59-block  0
unconditional  0 taken 1750
    17500:   59-block  1
unconditional  1 taken 17500
    19250:   59-block  2
branch  2 taken 17500
branch  3 taken 1750 (fallthrough)
        -:   60:        {
    17500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
    17500:   61-block  0
branch  0 taken 15750 (fallthrough)
branch  1 taken 1750
    15750:   61-block  1
branch  2 taken 0 (fallthrough)
branch  3 taken 15750
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      175:   73:  if (numPlayers == 2)
      175:   73-block  0
branch  0 taken 175 (fallthrough)
branch  1 taken 0
        -:   74:    {
      175:   75:      state->supplyCount[curse] = 10;
      175:   75-block  0
unconditional  0 taken 175
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
    $$$$$:   77-block  0
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    $$$$$:   79-block  0
unconditional  0 never executed
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
    $$$$$:   83-block  0
unconditional  0 never executed
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      175:   87:  if (numPlayers == 2)
      175:   87-block  0
branch  0 taken 175 (fallthrough)
branch  1 taken 0
        -:   88:    {
      175:   89:      state->supplyCount[estate] = 8;
      175:   90:      state->supplyCount[duchy] = 8;
      175:   91:      state->supplyCount[province] = 8;
      175:   91-block  0
unconditional  0 taken 175
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
    $$$$$:   97-block  0
unconditional  0 never executed
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      175:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      175:  102:  state->supplyCount[silver] = 40;
      175:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3675:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
      175:  106-block  0
unconditional  0 taken 175
     3500:  106-block  1
unconditional  1 taken 3500
     3675:  106-block  2
branch  2 taken 3500
branch  3 taken 175 (fallthrough)
        -:  107:    {
    28875:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
     3500:  108-block  0
unconditional  0 taken 3500
    25375:  108-block  1
unconditional  1 taken 25375
    28875:  108-block  2
branch  2 taken 27125
branch  3 taken 1750 (fallthrough)
        -:  109:	{
    27125:  110:	  if (kingdomCards[j] == i)
    27125:  110-block  0
branch  0 taken 1750 (fallthrough)
branch  1 taken 25375
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1750:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
     1750:  113-block  0
branch  0 taken 1579 (fallthrough)
branch  1 taken 171
     1579:  113-block  1
branch  2 taken 171 (fallthrough)
branch  3 taken 1408
        -:  114:		{
      684:  115:		  if (numPlayers == 2){ 
      342:  115-block  0
branch  0 taken 342 (fallthrough)
branch  1 taken 0
      342:  115-block  1
unconditional  2 taken 342
      342:  116:		    state->supplyCount[i] = 8; 
      342:  116-block  0
unconditional  0 taken 342
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
unconditional  0 never executed
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1408:  122:		  state->supplyCount[i] = 10;
     1408:  122-block  0
unconditional  0 taken 1408
        -:  123:		}
     1750:  124:	      break;
     1750:  124-block  0
unconditional  0 taken 1750
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    25375:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      525:  138:  for (i = 0; i < numPlayers; i++)
      175:  138-block  0
unconditional  0 taken 175
      350:  138-block  1
unconditional  1 taken 350
      525:  138-block  2
branch  2 taken 350
branch  3 taken 175 (fallthrough)
        -:  139:    {
      350:  140:      state->deckCount[i] = 0;
     1400:  141:      for (j = 0; j < 3; j++)
      350:  141-block  0
unconditional  0 taken 350
     1050:  141-block  1
unconditional  1 taken 1050
     1400:  141-block  2
branch  2 taken 1050
branch  3 taken 350 (fallthrough)
        -:  142:	{
     1050:  143:	  state->deck[i][j] = estate;
     1050:  144:	  state->deckCount[i]++;
        -:  145:	}
     2800:  146:      for (j = 3; j < 10; j++)
      350:  146-block  0
unconditional  0 taken 350
     2450:  146-block  1
unconditional  1 taken 2450
     2800:  146-block  2
branch  2 taken 2450
branch  3 taken 350 (fallthrough)
        -:  147:	{
     2450:  148:	  state->deck[i][j] = copper;
     2450:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      525:  154:  for (i = 0; i < numPlayers; i++)
      175:  154-block  0
unconditional  0 taken 175
      350:  154-block  1
unconditional  1 taken 350
      525:  154-block  2
branch  2 taken 350
branch  3 taken 175 (fallthrough)
        -:  155:    {
      350:  156:      if ( shuffle(i, state) < 0 )
      350:  156-block  0
call    0 returned 350
branch  1 taken 0 (fallthrough)
branch  2 taken 350
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      525:  163:  for (i = 0; i < numPlayers; i++)
      175:  163-block  0
unconditional  0 taken 175
      350:  163-block  1
unconditional  1 taken 350
      525:  163-block  2
branch  2 taken 350
branch  3 taken 175 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      350:  166:      state->handCount[i] = 0;
      350:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4900:  176:  for (i = 0; i <= treasure_map; i++)
      175:  176-block  0
unconditional  0 taken 175
     4725:  176-block  1
unconditional  1 taken 4725
     4900:  176-block  2
branch  2 taken 4725
branch  3 taken 175 (fallthrough)
        -:  177:    {
     4725:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      175:  182:  state->outpostPlayed = 0;
      175:  183:  state->phase = 0;
      175:  184:  state->numActions = 1;
      175:  185:  state->numBuys = 1;
      175:  186:  state->playedCardCount = 0;
      175:  187:  state->whoseTurn = 0;
      175:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1050:  192:  for (it = 0; it < 5; it++){
      175:  192-block  0
unconditional  0 taken 175
unconditional  1 taken 875
     1050:  192-block  1
branch  2 taken 875
branch  3 taken 175 (fallthrough)
      875:  193:    drawCard(state->whoseTurn, state);
      875:  193-block  0
call    0 returned 875
        -:  194:  }
        -:  195:
      175:  196:  updateCoins(state->whoseTurn, state, 0);
      175:  196-block  0
call    0 returned 175
        -:  197:
      175:  198:  return 0;
unconditional  0 taken 175
        -:  199:}
        -:  200:
function shuffle called 522 returned 100% blocks executed 100%
      522:  201:int shuffle(int player, struct gameState *state) {
      522:  201-block  0
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      522:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      522:  209:  if (state->deckCount[player] < 1)
      522:  209-block  0
branch  0 taken 172 (fallthrough)
branch  1 taken 350
      172:  210:    return -1;
      172:  210-block  0
unconditional  0 taken 172
      350:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
      350:  211-block  0
call    0 returned 350
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     3850:  214:  while (state->deckCount[player] > 0) {
unconditional  0 taken 350
     3850:  214-block  0
branch  1 taken 3500
branch  2 taken 350 (fallthrough)
     3500:  215:    card = floor(Random() * state->deckCount[player]);
     3500:  215-block  0
call    0 returned 3500
     3500:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3500:  217:    newDeckPos++;
    12234:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 3500
     8734:  218-block  0
unconditional  1 taken 8734
    12234:  218-block  1
branch  2 taken 8734
branch  3 taken 3500 (fallthrough)
     8734:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3500:  221:    state->deckCount[player]--;
     3500:  221-block  0
unconditional  0 taken 3500
        -:  222:  }
     3850:  223:  for (i = 0; i < newDeckPos; i++) {
      350:  223-block  0
unconditional  0 taken 350
     3500:  223-block  1
unconditional  1 taken 3500
     3850:  223-block  2
branch  2 taken 3500
branch  3 taken 350 (fallthrough)
     3500:  224:    state->deck[player][i] = newDeck[i];
     3500:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      522:  228:  return 0;
      350:  228-block  0
unconditional  0 taken 350
      522:  228-block  1
unconditional  1 taken 522
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  231-block  0
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
    $$$$$:  249-block  0
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  0
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  267-block  0
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
unconditional  0 never executed
    $$$$$:  269-block  0
unconditional  1 never executed
        -:  270:}
        -:  271:
function buyCard called 420 returned 100% blocks executed 93%
      840:  272:int buyCard(int supplyPos, struct gameState *state) {
      420:  272-block  0
      420:  272-block  1
unconditional  0 taken 420
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      420:  280:  who = state->whoseTurn;
        -:  281:
      420:  282:  if (state->numBuys < 1){
      420:  282-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 400
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
       20:  285:    return -1;
       20:  285-block  0
unconditional  0 taken 20
      400:  286:  } else if (supplyCount(supplyPos, state) <1){
      400:  286-block  0
call    0 returned 400
branch  1 taken 304 (fallthrough)
branch  2 taken 96
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      304:  289:    return -1;
      304:  289-block  0
unconditional  0 taken 304
       96:  290:  } else if (state->coins < getCost(supplyPos)){
       96:  290-block  0
call    0 returned 96
branch  1 taken 0 (fallthrough)
branch  2 taken 96
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
    $$$$$:  293-block  0
unconditional  0 never executed
        -:  294:  } else {
       96:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       96:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
       96:  297-block  0
call    0 returned 96
        -:  298:  
       96:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 96
       96:  300:    state->numBuys--;
unconditional  0 taken 96
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       96:  308:  return 0;
       96:  308-block  0
unconditional  0 taken 96
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    $$$$$:  311-block  0
    #####:  312:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  312-block  0
call    0 never executed
unconditional  1 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    $$$$$:  315-block  0
    #####:  316:  int currentPlayer = whoseTurn(state);
    $$$$$:  316-block  0
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 956 returned 100% blocks executed 100%
      956:  320:int supplyCount(int card, struct gameState *state) {
      956:  320-block  0
      956:  321:  return state->supplyCount[card];
      956:  321-block  0
unconditional  0 taken 956
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  324-block  0
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
unconditional  1 never executed
    $$$$$:  328-block  2
branch  2 never executed
branch  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
unconditional  1 never executed
    $$$$$:  333-block  2
branch  2 never executed
branch  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
unconditional  1 never executed
    $$$$$:  338-block  2
branch  2 never executed
branch  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 4 returned 100% blocks executed 100%
        4:  346:int whoseTurn(struct gameState *state) {
        4:  346-block  0
        4:  347:  return state->whoseTurn;
        4:  347-block  0
unconditional  0 taken 4
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
    $$$$$:  350-block  0
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
    $$$$$:  353-block  0
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 never executed
    $$$$$:  356-block  0
unconditional  1 never executed
    $$$$$:  356-block  1
branch  2 never executed
branch  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  364-block  0
unconditional  0 never executed
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$:  380-block  1
branch  2 never executed
branch  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  381-block  0
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  385-block  0
call    0 never executed
        -:  386:
    #####:  387:  return 0;
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
    $$$$$:  390-block  0
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
    $$$$$:  395-block  0
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
    $$$$$:  397-block  0
unconditional  0 never executed
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
    $$$$$:  402-block  0
unconditional  0 never executed
    $$$$$:  402-block  1
unconditional  1 never executed
    $$$$$:  402-block  2
branch  2 never executed
branch  3 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
    $$$$$:  404-block  0
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    $$$$$:  406-block  0
unconditional  0 never executed
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
    $$$$$:  409-block  0
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
    $$$$$:  411-block  0
unconditional  0 never executed
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    $$$$$:  414-block  0
unconditional  0 never executed
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
    $$$$$:  417-block  0
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
unconditional  1 never executed
    $$$$$:  422-block  2
branch  2 never executed
branch  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
call    2 never executed
unconditional  3 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
unconditional  1 never executed
    $$$$$:  433-block  2
branch  2 never executed
branch  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
call    2 never executed
unconditional  3 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
unconditional  1 never executed
    $$$$$:  444-block  2
branch  2 never executed
branch  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
call    2 never executed
unconditional  3 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  457-block  0
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
unconditional  1 never executed
    $$$$$:  464-block  2
branch  2 never executed
branch  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    $$$$$:  469-block  0
unconditional  0 never executed
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
call    0 never executed
unconditional  1 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
unconditional  1 never executed
    $$$$$:  479-block  2
branch  2 never executed
branch  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    $$$$$:  489-block  0
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
    $$$$$:  490-block  0
unconditional  1 never executed
    $$$$$:  490-block  1
branch  2 never executed
branch  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    $$$$$:  494-block  0
unconditional  0 never executed
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
unconditional  1 never executed
    $$$$$:  500-block  2
branch  2 never executed
branch  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    $$$$$:  504-block  0
unconditional  0 never executed
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
unconditional  1 never executed
    $$$$$:  510-block  2
branch  2 never executed
branch  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    $$$$$:  514-block  0
unconditional  0 never executed
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 976 returned 100% blocks executed 85%
      976:  525:int drawCard(int player, struct gameState *state)
      976:  525-block  0
        -:  526:{	int count;
        -:  527:  int deckCounter;
      976:  528:  if (state->deckCount[player] <= 0){//Deck is empty
      976:  528-block  0
branch  0 taken 86 (fallthrough)
branch  1 taken 890
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       86:  533:    for (i = 0; i < state->discardCount[player];i++){
       86:  533-block  0
unconditional  0 taken 86
    $$$$$:  533-block  1
unconditional  1 never executed
       86:  533-block  2
branch  2 taken 0
branch  3 taken 86 (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       86:  538:    state->deckCount[player] = state->discardCount[player];
       86:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       86:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
       86:  542-block  0
call    0 returned 86
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       86:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       86:  551:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 86
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       86:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       86:  559:    if (deckCounter == 0)
       86:  559-block  0
branch  0 taken 86 (fallthrough)
branch  1 taken 0
       86:  560:      return -1;
       86:  560-block  0
unconditional  0 taken 86
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    $$$$$:  564-block  0
unconditional  0 never executed
        -:  565:  }
        -:  566:
        -:  567:  else{
      890:  568:    int count = state->handCount[player];//Get current hand count for player
      890:  568-block  0
unconditional  0 taken 890
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      890:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      890:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      890:  576:    state->deckCount[player]--;
      890:  577:    state->handCount[player]++;//Increment hand count
      890:  577-block  0
unconditional  0 taken 890
        -:  578:  }
        -:  579:
      890:  580:  return 0;
      890:  580-block  0
unconditional  0 taken 890
        -:  581:}
        -:  582:
function getCost called 507 returned 100% blocks executed 97%
      507:  583:int getCost(int cardNumber)
      507:  583-block  0
        -:  584:{
      507:  585:  switch( cardNumber ) 
      507:  585-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 51
branch  8 taken 51
branch  9 taken 51
branch 10 taken 41
branch 11 taken 51
branch 12 taken 51
branch 13 taken 51
branch 14 taken 51
branch 15 taken 51
branch 16 taken 41
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        1:  588-block  0
unconditional  0 taken 1
        -:  589:    case estate:
        1:  590:      return 2;
        1:  590-block  0
unconditional  0 taken 1
        -:  591:    case duchy:
        1:  592:      return 5;
        1:  592-block  0
unconditional  0 taken 1
        -:  593:    case province:
        1:  594:      return 8;
        1:  594-block  0
unconditional  0 taken 1
        -:  595:    case copper:
        1:  596:      return 0;
        1:  596-block  0
unconditional  0 taken 1
        -:  597:    case silver:
        1:  598:      return 3;
        1:  598-block  0
unconditional  0 taken 1
        -:  599:    case gold:
        1:  600:      return 6;
        1:  600-block  0
unconditional  0 taken 1
        -:  601:    case adventurer:
       51:  602:      return 6;
       51:  602-block  0
unconditional  0 taken 51
        -:  603:    case council_room:
       51:  604:      return 5;
       51:  604-block  0
unconditional  0 taken 51
        -:  605:    case feast:
       51:  606:      return 4;
       51:  606-block  0
unconditional  0 taken 51
        -:  607:    case gardens:
       41:  608:      return 4;
       41:  608-block  0
unconditional  0 taken 41
        -:  609:    case mine:
       51:  610:      return 5;
       51:  610-block  0
unconditional  0 taken 51
        -:  611:    case remodel:
       51:  612:      return 4;
       51:  612-block  0
unconditional  0 taken 51
        -:  613:    case smithy:
       51:  614:      return 4;
       51:  614-block  0
unconditional  0 taken 51
        -:  615:    case village:
       51:  616:      return 3;
       51:  616-block  0
unconditional  0 taken 51
        -:  617:    case baron:
       51:  618:      return 4;
       51:  618-block  0
unconditional  0 taken 51
        -:  619:    case great_hall:
       41:  620:      return 3;
       41:  620-block  0
unconditional  0 taken 41
        -:  621:    case minion:
        1:  622:      return 5;
        1:  622-block  0
unconditional  0 taken 1
        -:  623:    case steward:
        1:  624:      return 3;
        1:  624-block  0
unconditional  0 taken 1
        -:  625:    case tribute:
        1:  626:      return 5;
        1:  626-block  0
unconditional  0 taken 1
        -:  627:    case ambassador:
        1:  628:      return 3;
        1:  628-block  0
unconditional  0 taken 1
        -:  629:    case cutpurse:
        1:  630:      return 4;
        1:  630-block  0
unconditional  0 taken 1
        -:  631:    case embargo: 
        1:  632:      return 2;
        1:  632-block  0
unconditional  0 taken 1
        -:  633:    case outpost:
        1:  634:      return 5;
        1:  634-block  0
unconditional  0 taken 1
        -:  635:    case salvager:
        1:  636:      return 4;
        1:  636-block  0
unconditional  0 taken 1
        -:  637:    case sea_hag:
        1:  638:      return 4;
        1:  638-block  0
unconditional  0 taken 1
        -:  639:    case treasure_map:
        1:  640:      return 4;
        1:  640-block  0
unconditional  0 taken 1
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
        -:  644:}
        -:  645:
        -:  646:
function cardSmithy called 1 returned 100% blocks executed 100%
        1:  647:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        1:  647-block  0
        -:  648:{
        -:  649:  int i;
        -:  650:
        -:  651:  //+3 Cards
        5:  652:  for (i = 0; i <= 3; i++)
        1:  652-block  0
unconditional  0 taken 1
unconditional  1 taken 4
        5:  652-block  1
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        -:  653:  {  
        4:  654:    drawCard(currentPlayer, state);
        4:  654-block  0
call    0 returned 4
        -:  655:  }
        -:  656:		
        -:  657:  //discard card from hand
        1:  658:  discardCard(handPos, currentPlayer, state, 0);
        1:  658-block  0
call    0 returned 1
        1:  659:  return 0;
unconditional  0 taken 1
        -:  660:}
        -:  661:
        -:  662:		
function cardAdventurer called 1 returned 100% blocks executed 92%
        1:  663:int cardAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand[], int z)
        1:  663-block  0
        -:  664:{
       92:  665:    while(drawntreasure<2){
        1:  665-block  0
unconditional  0 taken 1
       92:  665-block  1
branch  1 taken 91
branch  2 taken 1 (fallthrough)
       91:  666:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       91:  666-block  0
branch  0 taken 86 (fallthrough)
branch  1 taken 5
       86:  667:	  shuffle(currentPlayer, state);
       86:  667-block  0
call    0 returned 86
unconditional  1 taken 86
        -:  668:	}
       91:  669:	drawCard(currentPlayer, state);
       91:  669-block  0
call    0 returned 91
       91:  670:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       91:  671:	if (cardDrawn == gold)
branch  0 taken 2 (fallthrough)
branch  1 taken 89
        2:  672:	  drawntreasure++;
        2:  672-block  0
unconditional  0 taken 2
        -:  673:	else{
       89:  674:	  temphand[z]=cardDrawn;
       89:  675:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       89:  675-block  0
unconditional  0 taken 89
        -:  676:	  //z++;
        -:  677:	}
        -:  678:      }
        1:  679:      while(z-1>=0){
        1:  679-block  0
unconditional  0 taken 1
        1:  679-block  1
branch  1 taken 0
branch  2 taken 1 (fallthrough)
    #####:  680:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  681:	z=z-1;
    $$$$$:  681-block  0
unconditional  0 never executed
        -:  682:      }
        1:  683:      return 0;
        1:  683-block  0
unconditional  0 taken 1
        -:  684:}
        -:  685:
        -:  686:
function cardFeast called 0 returned 0% blocks executed 0%
    #####:  687:int cardFeast(struct gameState *state, int temphand[], int currentPlayer, int choice1)
    $$$$$:  687-block  0
        -:  688:{
        -:  689:      //Index variables for looping
        -:  690:      int i;
        -:  691:      int x;
        -:  692:
        -:  693:      //gain card with cost up to 5
        -:  694:      //Backup hand
    #####:  695:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  695-block  0
unconditional  0 never executed
    $$$$$:  695-block  1
unconditional  1 never executed
    $$$$$:  695-block  2
branch  2 never executed
branch  3 never executed
    #####:  696:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  697:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  698:      }
        -:  699:      //Backup hand
        -:  700:
        -:  701:      //Update Coins for Buy
    #####:  702:      updateCoins(currentPlayer, state, 5);
    $$$$$:  702-block  0
call    0 never executed
    #####:  703:      x = 1;//Condition to loop on
    #####:  704:      while( x = 1) {//Buy one card
unconditional  0 never executed
    #####:  705:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  705-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  706:	  if (DEBUG)
        -:  707:	    printf("None of that card left, sorry!\n");
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  711:	  }
        -:  712:	}
    #####:  713:	else if (state->coins < getCost(choice1)){
    $$$$$:  713-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  714:	  //printf("That card is too expensive!\n");
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  718:	  }
        -:  719:	}
        -:  720:	else{
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  724:	  }
        -:  725:
    #####:  726:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  726-block  0
call    0 never executed
    #####:  727:	  x = 0;//No more buying cards
unconditional  0 never executed
        -:  728:
        -:  729:	  if (DEBUG){
        -:  730:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  731:	  }
        -:  732:
        -:  733:	}
        -:  734:      }     
        -:  735:
        -:  736:      //Reset Hand
        -:  737:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  738:	state->hand[currentPlayer][i] = temphand[i];
        -:  739:	temphand[i] = -1;
        -:  740:      }
        -:  741:      //Reset Hand
        -:  742:      			
        -:  743:      return 0;
        -:  744:}
        -:  745:
        -:  746: 
function cardAmbassador called 0 returned 0% blocks executed 0%
    #####:  747:int cardAmbassador(int choice1, int choice2, struct gameState *state, int handPos, int currentPlayer)
    $$$$$:  747-block  0
        -:  748:{
        -:  749:    int i; //used in for loop
    #####:  750:    int j = 0;		//used to check if player has enough cards to discard
        -:  751:
    #####:  752:      if (choice2 > 2 || choice2 < 0)
    $$$$$:  752-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  752-block  1
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:	  return -1;				
    $$$$$:  754-block  0
unconditional  0 never executed
        -:  755:	}
        -:  756:
    #####:  757:      if (choice1 == handPos)
    $$$$$:  757-block  0
branch  0 never executed
branch  1 never executed
        -:  758:	{
    #####:  759:	  return -1;
    $$$$$:  759-block  0
unconditional  0 never executed
        -:  760:	}
        -:  761:
    #####:  762:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  762-block  0
unconditional  0 never executed
    $$$$$:  762-block  1
unconditional  1 never executed
    $$$$$:  762-block  2
branch  2 never executed
branch  3 never executed
        -:  763:	{
    #####:  764:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$:  764-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  764-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  764-block  2
branch  4 never executed
branch  5 never executed
        -:  765:	    {
    #####:  766:	      j++;
    $$$$$:  766-block  0
unconditional  0 never executed
        -:  767:	    }
        -:  768:	}
    #####:  769:      if (j < choice2)
    $$$$$:  769-block  0
branch  0 never executed
branch  1 never executed
        -:  770:	{
    #####:  771:	  return -1;				
    $$$$$:  771-block  0
unconditional  0 never executed
        -:  772:	}
        -:  773:
        -:  774:      if (DEBUG) 
        -:  775:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  776:
        -:  777:      //increase supply count for choosen card by amount being discarded
    #####:  778:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  779:			
        -:  780:      //each other player gains a copy of revealed card
    #####:  781:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  781-block  0
unconditional  0 never executed
    $$$$$:  781-block  1
unconditional  1 never executed
    $$$$$:  781-block  2
branch  2 never executed
branch  3 never executed
        -:  782:	{
    #####:  783:	  if (i != currentPlayer)
    $$$$$:  783-block  0
branch  0 never executed
branch  1 never executed
        -:  784:	    {
    #####:  785:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$:  785-block  0
call    0 never executed
unconditional  1 never executed
        -:  786:	    }
        -:  787:	}
        -:  788:
        -:  789:      //discard played card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$:  790-block  0
call    0 never executed
        -:  791:
        -:  792:      //trash copies of cards returned to supply
    #####:  793:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
    $$$$$:  793-block  0
unconditional  1 never executed
    $$$$$:  793-block  1
branch  2 never executed
branch  3 never executed
        -:  794:	{
    #####:  795:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  795-block  0
unconditional  0 never executed
    $$$$$:  795-block  1
unconditional  1 never executed
    $$$$$:  795-block  2
branch  2 never executed
branch  3 never executed
        -:  796:	    {
    #####:  797:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$:  797-block  0
branch  0 never executed
branch  1 never executed
        -:  798:		{
    #####:  799:		  discardCard(i, currentPlayer, state, 1);
    $$$$$:  799-block  0
call    0 never executed
    #####:  800:		  break;
unconditional  0 never executed
        -:  801:		}
        -:  802:	    }
        -:  803:	}			
        -:  804:
    #####:  805:      return 0;
    $$$$$:  805-block  0
unconditional  0 never executed
        -:  806:}
        -:  807:
        -:  808:
function cardSea_hag called 0 returned 0% blocks executed 0%
    #####:  809:int cardSea_hag(struct gameState *state, int currentPlayer)
    $$$$$:  809-block  0
        -:  810:{
        -:  811:    int i; //Index variable for the for loop
    #####:  812:    for (i = 0; i < state->numPlayers; i++){
    $$$$$:  812-block  0
unconditional  0 never executed
    $$$$$:  812-block  1
unconditional  1 never executed
    $$$$$:  812-block  2
branch  2 never executed
branch  3 never executed
    #####:  813:	if (i != currentPlayer){
    $$$$$:  813-block  0
branch  0 never executed
branch  1 never executed
    #####:  814:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]++;
    #####:  815:	  state->discardCount[i]--;
    #####:  816:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$:  816-block  0
unconditional  0 never executed
        -:  817:	}
        -:  818:      }
    #####:  819:      return 0;
    $$$$$:  819-block  0
unconditional  0 never executed
        -:  820:}
        -:  821:
function cardEffect called 4 returned 100% blocks executed 11%
        4:  822:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        4:  822-block  0
        -:  823:{
        -:  824:  int i;
        -:  825:  int j;
        -:  826:  int k;
        -:  827:  int x;
        -:  828:  int index;
        4:  829:  int currentPlayer = whoseTurn(state);
        4:  829-block  0
call    0 returned 4
        4:  830:  int nextPlayer = currentPlayer + 1;
        -:  831:
        4:  832:  int tributeRevealedCards[2] = {-1, -1};
        -:  833:  int temphand[MAX_HAND];// moved above the if statement
        4:  834:  int drawntreasure=0;
        -:  835:  int cardDrawn;
        4:  836:  int z = 0;// this is the counter for the temp hand
        4:  837:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0 (fallthrough)
branch  1 taken 4
    #####:  838:    nextPlayer = 0;
    $$$$$:  838-block  0
unconditional  0 never executed
        -:  839:  }
        -:  840:  
        -:  841:	
        -:  842:  //uses switch to select card and perform actions
        4:  843:  switch( card ) 
        4:  843-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 1
branch  6 taken 1
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
        -:  844:    {
        -:  845:    case adventurer:
        1:  846:        return cardAdventurer(drawntreasure, state, currentPlayer, cardDrawn, temphand, z);
        1:  846-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  847:
        -:  848:    case council_room:
        -:  849:      //+4 Cards
        5:  850:      for (i = 0; i < 4; i++)
        1:  850-block  0
unconditional  0 taken 1
unconditional  1 taken 4
        5:  850-block  1
branch  2 taken 4
branch  3 taken 1 (fallthrough)
        -:  851:	{
        4:  852:	  drawCard(currentPlayer, state);
        4:  852-block  0
call    0 returned 4
        -:  853:	}
        -:  854:			
        -:  855:      //+1 Buy
        1:  856:      state->numBuys++;
        -:  857:			
        -:  858:      //Each other player draws a card
        3:  859:      for (i = 0; i < state->numPlayers; i++)
        1:  859-block  0
unconditional  0 taken 1
        2:  859-block  1
unconditional  1 taken 2
        3:  859-block  2
branch  2 taken 2
branch  3 taken 1 (fallthrough)
        -:  860:	{
        2:  861:	  if ( i != currentPlayer )
        2:  861-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:  862:	    {
        1:  863:	      drawCard(i, state);
        1:  863-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  864:	    }
        -:  865:	}
        -:  866:			
        -:  867:      //put played card in played card pile
        1:  868:      discardCard(handPos, currentPlayer, state, 0);
        1:  868-block  0
call    0 returned 1
        -:  869:			
        1:  870:      return 0;
unconditional  0 taken 1
        -:  871:			
        -:  872:    case feast:
    #####:  873:      return cardFeast(state, temphand, currentPlayer, choice1);
    $$$$$:  873-block  0
call    0 never executed
unconditional  1 never executed
        -:  874:			
        -:  875:    case mine:
    #####:  876:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  877:
    #####:  878:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  878-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  878-block  1
branch  2 never executed
branch  3 never executed
        -:  879:	{
    #####:  880:	  return -1;
    $$$$$:  880-block  0
unconditional  0 never executed
        -:  881:	}
        -:  882:		
    #####:  883:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  883-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  883-block  1
branch  2 never executed
branch  3 never executed
        -:  884:	{
    #####:  885:	  return -1;
    $$$$$:  885-block  0
unconditional  0 never executed
        -:  886:	}
        -:  887:
    #####:  888:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  888-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  889:	{
    #####:  890:	  return -1;
    $$$$$:  890-block  0
unconditional  0 never executed
        -:  891:	}
        -:  892:
    #####:  893:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  893-block  0
call    0 never executed
        -:  894:
        -:  895:      //discard card from hand
    #####:  896:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  897:
        -:  898:      //discard trashed card
    #####:  899:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  899-block  0
unconditional  1 never executed
    $$$$$:  899-block  1
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  901-block  0
branch  0 never executed
branch  1 never executed
        -:  902:	    {
    #####:  903:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  903-block  0
call    0 never executed
    #####:  904:	      break;
unconditional  0 never executed
        -:  905:	    }
        -:  906:	}
        -:  907:			
    #####:  908:      return 0;
    $$$$$:  908-block  0
unconditional  0 never executed
        -:  909:			
        -:  910:    case remodel:
    #####:  911:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  912:
    #####:  913:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  913-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  914:	{
    #####:  915:	  return -1;
    $$$$$:  915-block  0
unconditional  0 never executed
        -:  916:	}
        -:  917:
    #####:  918:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  918-block  0
call    0 never executed
        -:  919:
        -:  920:      //discard card from hand
    #####:  921:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  922:
        -:  923:      //discard trashed card
    #####:  924:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
    $$$$$:  924-block  0
unconditional  1 never executed
    $$$$$:  924-block  1
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  926-block  0
branch  0 never executed
branch  1 never executed
        -:  927:	    {
    #####:  928:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  928-block  0
call    0 never executed
    #####:  929:	      break;
unconditional  0 never executed
        -:  930:	    }
        -:  931:	}
        -:  932:
        -:  933:
    #####:  934:      return 0;
    $$$$$:  934-block  0
unconditional  0 never executed
        -:  935:		
        -:  936:    case smithy:
        1:  937:      return cardSmithy(currentPlayer, state, handPos);
        1:  937-block  0
call    0 returned 1
unconditional  1 taken 1
        -:  938:		
        -:  939:    case village:
        -:  940:      //+1 Card
        1:  941:      drawCard(currentPlayer, state);
        1:  941-block  0
call    0 returned 1
        -:  942:			
        -:  943:      //+2 Actions
        1:  944:      state->numActions = state->numActions + 2;
        -:  945:			
        -:  946:      //discard played card from hand
        1:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 1
        1:  948:      return 0;
unconditional  0 taken 1
        -:  949:		
        -:  950:    case baron:
    #####:  951:      state->numBuys++;//Increase buys by 1!
    #####:  952:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  952-block  0
branch  0 never executed
branch  1 never executed
    #####:  953:	int p = 0;//Iterator for hand!
    #####:  954:	int card_not_discarded = 1;//Flag for discard set!
    #####:  955:	while(card_not_discarded){
    $$$$$:  955-block  0
unconditional  0 never executed
    $$$$$:  955-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  955-block  2
unconditional  3 never executed
    #####:  956:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  956-block  0
branch  0 never executed
branch  1 never executed
    #####:  957:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  958:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  959:	    state->discardCount[currentPlayer]++;
    #####:  960:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  960-block  0
unconditional  0 never executed
    $$$$$:  960-block  1
unconditional  1 never executed
    $$$$$:  960-block  2
branch  2 never executed
branch  3 never executed
    #####:  961:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  962:	    }
    #####:  963:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  964:	    state->handCount[currentPlayer]--;
    #####:  965:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  965-block  0
unconditional  0 never executed
        -:  966:	  }
    #####:  967:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	    if(DEBUG) {
        -:  969:	      printf("No estate cards in your hand, invalid choice\n");
        -:  970:	      printf("Must gain an estate if there are any\n");
        -:  971:	    }
    #####:  972:	    if (supplyCount(estate, state) > 0){
    $$$$$:  972-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  973:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  973-block  0
call    0 never executed
    #####:  974:	      state->supplyCount[estate]--;//Decrement estates
    #####:  975:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:		isGameOver(state);
    $$$$$:  976-block  0
call    0 never executed
unconditional  1 never executed
        -:  977:	      }
        -:  978:	    }
    #####:  979:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  979-block  0
unconditional  0 never executed
        -:  980:	  }
        -:  981:			    
        -:  982:	  else{
    #####:  983:	    p++;//Next card
    $$$$$:  983-block  0
unconditional  0 never executed
        -:  984:	  }
        -:  985:	}
        -:  986:      }
        -:  987:			    
        -:  988:      else{
    #####:  989:	if (supplyCount(estate, state) > 0){
    $$$$$:  989-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  990:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  990-block  0
call    0 never executed
    #####:  991:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  992:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  993:	    isGameOver(state);
    $$$$$:  993-block  0
call    0 never executed
unconditional  1 never executed
        -:  994:	  }
        -:  995:	}
        -:  996:      }
        -:  997:	    
        -:  998:      
    #####:  999:      return 0;
    $$$$$:  999-block  0
unconditional  0 never executed
        -: 1000:		
        -: 1001:    case great_hall:
        -: 1002:      //+1 Card
    #####: 1003:      drawCard(currentPlayer, state);
    $$$$$: 1003-block  0
call    0 never executed
        -: 1004:			
        -: 1005:      //+1 Actions
    #####: 1006:      state->numActions++;
        -: 1007:			
        -: 1008:      //discard card from hand
    #####: 1009:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1010:      return 0;
unconditional  0 never executed
        -: 1011:		
        -: 1012:    case minion:
        -: 1013:      //+1 action
    #####: 1014:      state->numActions++;
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1017-block  0
call    0 never executed
        -: 1018:			
    #####: 1019:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1020:	{
    #####: 1021:	  state->coins = state->coins + 2;
    $$$$$: 1021-block  0
unconditional  0 never executed
        -: 1022:	}
        -: 1023:			
    #####: 1024:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$: 1024-block  0
branch  0 never executed
branch  1 never executed
        -: 1025:	{
        -: 1026:	  //discard hand
    #####: 1027:	  while(numHandCards(state) > 0)
    $$$$$: 1027-block  0
unconditional  0 never executed
    $$$$$: 1027-block  1
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1028:	    {
    #####: 1029:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1029-block  0
call    0 never executed
unconditional  1 never executed
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //draw 4
    #####: 1033:	  for (i = 0; i < 4; i++)
    $$$$$: 1033-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1033-block  1
branch  2 never executed
branch  3 never executed
        -: 1034:	    {
    #####: 1035:	      drawCard(currentPlayer, state);
    $$$$$: 1035-block  0
call    0 never executed
        -: 1036:	    }
        -: 1037:				
        -: 1038:	  //other players discard hand and redraw if hand size > 4
    #####: 1039:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1039-block  0
unconditional  0 never executed
    $$$$$: 1039-block  1
unconditional  1 never executed
    $$$$$: 1039-block  2
branch  2 never executed
branch  3 never executed
        -: 1040:	    {
    #####: 1041:	      if (i != currentPlayer)
    $$$$$: 1041-block  0
branch  0 never executed
branch  1 never executed
        -: 1042:		{
    #####: 1043:		  if ( state->handCount[i] > 4 )
    $$$$$: 1043-block  0
branch  0 never executed
branch  1 never executed
        -: 1044:		    {
        -: 1045:		      //discard hand
    #####: 1046:		      while( state->handCount[i] > 0 )
    $$$$$: 1046-block  0
unconditional  0 never executed
    $$$$$: 1046-block  1
branch  1 never executed
branch  2 never executed
        -: 1047:			{
    #####: 1048:			  discardCard(handPos, i, state, 0);
    $$$$$: 1048-block  0
call    0 never executed
unconditional  1 never executed
        -: 1049:			}
        -: 1050:							
        -: 1051:		      //draw 4
    #####: 1052:		      for (j = 0; j < 4; j++)
    $$$$$: 1052-block  0
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1052-block  1
branch  2 never executed
branch  3 never executed
        -: 1053:			{
    #####: 1054:			  drawCard(i, state);
    $$$$$: 1054-block  0
call    0 never executed
        -: 1055:			}
        -: 1056:		    }
        -: 1057:		}
        -: 1058:	    }
        -: 1059:				
        -: 1060:	}
    #####: 1061:      return 0;
    $$$$$: 1061-block  0
unconditional  0 never executed
        -: 1062:		
        -: 1063:    case steward:
    #####: 1064:      if (choice1 == 1)
    $$$$$: 1064-block  0
branch  0 never executed
branch  1 never executed
        -: 1065:	{
        -: 1066:	  //+2 cards
    #####: 1067:	  drawCard(currentPlayer, state);
    $$$$$: 1067-block  0
call    0 never executed
    #####: 1068:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1069:	}
    #####: 1070:      else if (choice1 == 2)
    $$$$$: 1070-block  0
branch  0 never executed
branch  1 never executed
        -: 1071:	{
        -: 1072:	  //+2 coins
    #####: 1073:	  state->coins = state->coins + 2;
    $$$$$: 1073-block  0
unconditional  0 never executed
        -: 1074:	}
        -: 1075:      else
        -: 1076:	{
        -: 1077:	  //trash 2 cards in hand
    #####: 1078:	  discardCard(choice2, currentPlayer, state, 1);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1080:	}
        -: 1081:			
        -: 1082:      //discard card from hand
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1083-block  0
call    0 never executed
    #####: 1084:      return 0;
unconditional  0 never executed
        -: 1085:		
        -: 1086:    case tribute:
    #####: 1087:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1087-block  0
branch  0 never executed
branch  1 never executed
    #####: 1088:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1088-block  0
branch  0 never executed
branch  1 never executed
    #####: 1089:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	  state->deckCount[nextPlayer]--;
    $$$$$: 1090-block  0
unconditional  0 never executed
        -: 1091:	}
    #####: 1092:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1092-block  0
branch  0 never executed
branch  1 never executed
    #####: 1093:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1094:	  state->discardCount[nextPlayer]--;
    $$$$$: 1094-block  0
unconditional  0 never executed
        -: 1095:	}
        -: 1096:	else{
        -: 1097:	  //No Card to Reveal
        -: 1098:	  if (DEBUG){
        -: 1099:	    printf("No cards to reveal\n");
        -: 1100:	  }
        -: 1101:	}
        -: 1102:      }
        -: 1103:	    
        -: 1104:      else{
    #####: 1105:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1105-block  0
branch  0 never executed
branch  1 never executed
    #####: 1106:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1106-block  0
unconditional  0 never executed
    $$$$$: 1106-block  1
unconditional  1 never executed
    $$$$$: 1106-block  2
branch  2 never executed
branch  3 never executed
    #####: 1107:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1108:	    state->deckCount[nextPlayer]++;
    #####: 1109:	    state->discard[nextPlayer][i] = -1;
    #####: 1110:	    state->discardCount[nextPlayer]--;
        -: 1111:	  }
        -: 1112:			    
    #####: 1113:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1113-block  0
call    0 never executed
unconditional  1 never executed
        -: 1114:	} 
    #####: 1115:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1116:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1117:	state->deckCount[nextPlayer]--;
    #####: 1118:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:	state->deckCount[nextPlayer]--;
    $$$$$: 1120-block  0
unconditional  0 never executed
        -: 1121:      }    
        -: 1122:		       
    #####: 1123:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1123-block  0
branch  0 never executed
branch  1 never executed
    #####: 1124:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1125:	state->playedCardCount++;
    #####: 1126:	tributeRevealedCards[1] = -1;
    $$$$$: 1126-block  0
unconditional  0 never executed
        -: 1127:      }
        -: 1128:
    #####: 1129:      for (i = 0; i <= 2; i ++){
    $$$$$: 1129-block  0
unconditional  0 never executed
    $$$$$: 1129-block  1
unconditional  1 never executed
    $$$$$: 1129-block  2
branch  2 never executed
branch  3 never executed
    #####: 1130:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1130-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1130-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1130-block  2
branch  4 never executed
branch  5 never executed
    #####: 1131:	  state->coins += 2;
    $$$$$: 1131-block  0
unconditional  0 never executed
        -: 1132:	}
        -: 1133:		    
    #####: 1134:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1134-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1134-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1134-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1134-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1134-block  4
branch  8 never executed
branch  9 never executed
    #####: 1135:	  drawCard(currentPlayer, state);
    $$$$$: 1135-block  0
call    0 never executed
    #####: 1136:	  drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1137:	}
        -: 1138:	else{//Action Card
    #####: 1139:	  state->numActions = state->numActions + 2;
    $$$$$: 1139-block  0
unconditional  0 never executed
        -: 1140:	}
        -: 1141:      }
        -: 1142:	    
    #####: 1143:      return 0;
    $$$$$: 1143-block  0
unconditional  0 never executed
        -: 1144:		
        -: 1145:    case ambassador:
        -: 1146:
    #####: 1147:      cardAmbassador(choice1, choice2, state, handPos, currentPlayer);
    $$$$$: 1147-block  0
call    0 never executed
unconditional  1 never executed
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1151-block  0
call    0 never executed
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
    $$$$$: 1152-block  0
unconditional  1 never executed
    $$$$$: 1152-block  1
branch  2 never executed
branch  3 never executed
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
    $$$$$: 1154-block  0
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1156-block  0
unconditional  0 never executed
    $$$$$: 1156-block  1
unconditional  1 never executed
    $$$$$: 1156-block  2
branch  2 never executed
branch  3 never executed
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
    $$$$$: 1158-block  0
branch  0 never executed
branch  1 never executed
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    $$$$$: 1160-block  0
call    0 never executed
    #####: 1161:		      break;
unconditional  0 never executed
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
    $$$$$: 1163-block  0
branch  0 never executed
branch  1 never executed
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1165-block  0
unconditional  0 never executed
    $$$$$: 1165-block  1
unconditional  1 never executed
    $$$$$: 1165-block  2
branch  2 never executed
branch  3 never executed
        -: 1166:			{
        -: 1167:			  if (DEBUG)
        -: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
    $$$$$: 1170-block  0
unconditional  0 never executed
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1179-block  0
call    0 never executed
        -: 1180:
    #####: 1181:      return 0;
unconditional  0 never executed
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
    #####: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
    #####: 1189:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1189-block  0
branch  0 never executed
branch  1 never executed
        -: 1190:	{
    #####: 1191:	  return -1;
    $$$$$: 1191-block  0
unconditional  0 never executed
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
    #####: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1198-block  0
call    0 never executed
    #####: 1199:      return 0;
unconditional  0 never executed
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1206-block  0
call    0 never executed
    #####: 1207:      return 0;
unconditional  0 never executed
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
    #####: 1211:      state->numBuys++;
        -: 1212:			
    #####: 1213:      if (choice1)
    $$$$$: 1213-block  0
branch  0 never executed
branch  1 never executed
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
    #####: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1216-block  0
call    0 never executed
call    1 never executed
        -: 1217:	  //trash card
    #####: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
unconditional  1 never executed
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
    #####: 1222:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1222-block  0
call    0 never executed
    #####: 1223:      return 0;
unconditional  0 never executed
        -: 1224:		
        -: 1225:    case sea_hag:
    #####: 1226:      return cardSea_hag(state, currentPlayer);
    $$$$$: 1226-block  0
call    0 never executed
unconditional  1 never executed
        -: 1227:		
        -: 1228:    case treasure_map:
        -: 1229:      //search hand for another treasure_map
    #####: 1230:      index = -1;
    #####: 1231:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1231-block  0
unconditional  0 never executed
    $$$$$: 1231-block  1
unconditional  1 never executed
    $$$$$: 1231-block  2
branch  2 never executed
branch  3 never executed
        -: 1232:	{
    #####: 1233:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1233-block  1
branch  2 never executed
branch  3 never executed
        -: 1234:	    {
    #####: 1235:	      index = i;
    #####: 1236:	      break;
    $$$$$: 1236-block  0
unconditional  0 never executed
        -: 1237:	    }
        -: 1238:	}
    #####: 1239:      if (index > -1)
    $$$$$: 1239-block  0
branch  0 never executed
branch  1 never executed
        -: 1240:	{
        -: 1241:	  //trash both treasure cards
    #####: 1242:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1242-block  0
call    0 never executed
    #####: 1243:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1244:
        -: 1245:	  //gain 4 Gold cards
    #####: 1246:	  for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
    $$$$$: 1246-block  0
branch  2 never executed
branch  3 never executed
        -: 1247:	    {
    #####: 1248:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1248-block  0
call    0 never executed
        -: 1249:	    }
        -: 1250:				
        -: 1251:	  //return success
    #####: 1252:	  return 1;
    $$$$$: 1252-block  0
unconditional  0 never executed
        -: 1253:	}
        -: 1254:			
        -: 1255:      //no second treasure_map found in hand
    #####: 1256:      return -1;
    $$$$$: 1256-block  0
unconditional  0 never executed
        -: 1257:    }
        -: 1258:	
        4: 1259:  return -1;
    $$$$$: 1259-block  0
unconditional  0 never executed
        4: 1259-block  1
unconditional  1 taken 4
        -: 1260:}
        -: 1261:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1262:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        3: 1262-block  0
        -: 1263:{
        -: 1264:	
        -: 1265:  //if card is not trashed, added to Played pile 
        3: 1266:  if (trashFlag < 1)
        3: 1266-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 0
        -: 1267:    {
        -: 1268:      //add card to played pile
        3: 1269:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1270:      state->playedCardCount++;
        3: 1270-block  0
unconditional  0 taken 3
        -: 1271:    }
        -: 1272:	
        -: 1273:  //set played card to -1
        3: 1274:  state->hand[currentPlayer][handPos] = -1;
        -: 1275:	
        -: 1276:  //remove card from player's hand
        3: 1277:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        3: 1277-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
    $$$$$: 1280-block  0
unconditional  0 never executed
        -: 1281:    }
        3: 1282:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        3: 1282-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
    #####: 1285:      state->handCount[currentPlayer]--;
    $$$$$: 1285-block  0
unconditional  0 never executed
        -: 1286:    }
        -: 1287:  else 	
        -: 1288:    {
        -: 1289:      //replace discarded card with last card in hand
        3: 1290:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1291:      //set last card to -1
        3: 1292:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1293:      //reduce number of cards in hand
        3: 1294:      state->handCount[currentPlayer]--;
        3: 1294-block  0
unconditional  0 taken 3
        -: 1295:    }
        -: 1296:	
        3: 1297:  return 0;
        3: 1297-block  0
unconditional  0 taken 3
        -: 1298:}
        -: 1299:
function gainCard called 156 returned 100% blocks executed 90%
      156: 1300:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
      156: 1300-block  0
        -: 1301:{
        -: 1302:  //Note: supplyPos is enum of choosen card
        -: 1303:	
        -: 1304:  //check if supply pile is empty (0) or card is not used in game (-1)
      156: 1305:  if ( supplyCount(supplyPos, state) < 1 )
      156: 1305-block  0
call    0 returned 156
branch  1 taken 0 (fallthrough)
branch  2 taken 156
        -: 1306:    {
    #####: 1307:      return -1;
    $$$$$: 1307-block  0
unconditional  0 never executed
        -: 1308:    }
        -: 1309:	
        -: 1310:  //added card for [whoseTurn] current player:
        -: 1311:  // toFlag = 0 : add to discard
        -: 1312:  // toFlag = 1 : add to deck
        -: 1313:  // toFlag = 2 : add to hand
        -: 1314:
      156: 1315:  if (toFlag == 1)
      156: 1315-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 136
        -: 1316:    {
       20: 1317:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       20: 1318:      state->deckCount[player]++;
       20: 1318-block  0
unconditional  0 taken 20
        -: 1319:    }
      136: 1320:  else if (toFlag == 2)
      136: 1320-block  0
branch  0 taken 20 (fallthrough)
branch  1 taken 116
        -: 1321:    {
       20: 1322:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       20: 1323:      state->handCount[player]++;
       20: 1323-block  0
unconditional  0 taken 20
        -: 1324:    }
        -: 1325:  else
        -: 1326:    {
      116: 1327:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      116: 1328:      state->discardCount[player]++;
      116: 1328-block  0
unconditional  0 taken 116
        -: 1329:    }
        -: 1330:	
        -: 1331:  //decrease number in supply pile
      156: 1332:  state->supplyCount[supplyPos]--;
        -: 1333:	 
      156: 1334:  return 0;
      156: 1334-block  0
unconditional  0 taken 156
        -: 1335:}
        -: 1336:
function updateCoins called 615 returned 100% blocks executed 100%
      615: 1337:int updateCoins(int player, struct gameState *state, int bonus)
      615: 1337-block  0
        -: 1338:{
        -: 1339:  int i;
        -: 1340:	
        -: 1341:  //reset coin count
      615: 1342:  state->coins = 0;
        -: 1343:
        -: 1344:  //add coins for each Treasure card in player's hand
     2810: 1345:  for (i = 0; i < state->handCount[player]; i++)
      615: 1345-block  0
unconditional  0 taken 615
     2195: 1345-block  1
unconditional  1 taken 2195
     2810: 1345-block  2
branch  2 taken 2195
branch  3 taken 615 (fallthrough)
        -: 1346:    {
     2195: 1347:      if (state->hand[player][i] == copper)
     2195: 1347-block  0
branch  0 taken 1226 (fallthrough)
branch  1 taken 969
        -: 1348:	{
     1226: 1349:	  state->coins += 1;
     1226: 1349-block  0
unconditional  0 taken 1226
        -: 1350:	}
      969: 1351:      else if (state->hand[player][i] == silver)
      969: 1351-block  0
branch  0 taken 330 (fallthrough)
branch  1 taken 639
        -: 1352:	{
      330: 1353:	  state->coins += 2;
      330: 1353-block  0
unconditional  0 taken 330
        -: 1354:	}
      639: 1355:      else if (state->hand[player][i] == gold)
      639: 1355-block  0
branch  0 taken 462 (fallthrough)
branch  1 taken 177
        -: 1356:	{
      462: 1357:	  state->coins += 3;
      462: 1357-block  0
unconditional  0 taken 462
        -: 1358:	}	
        -: 1359:    }	
        -: 1360:
        -: 1361:  //add bonus
      615: 1362:  state->coins += bonus;
        -: 1363:
      615: 1364:  return 0;
      615: 1364-block  0
unconditional  0 taken 615
        -: 1365:}
        -: 1366:
        -: 1367:
        -: 1368://end of dominion.c
